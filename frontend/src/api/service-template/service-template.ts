/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	useQuery,
	useMutation,
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from 'react-query';
import type {
	ServiceTemplateRecord,
	ErrorResponse,
	CreateServiceTemplate,
	UpdateServiceTemplate,
} from '.././models';
import { customInstance, ErrorType } from '.././axios';

/**
 * Create a new service template
 * @summary Add a new service template
 */
export const serviceTemplateCreate = (
	createServiceTemplate: CreateServiceTemplate
) => {
	return customInstance<ServiceTemplateRecord>({
		url: `/api/v1/service-templates`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: createServiceTemplate,
	});
};

export type ServiceTemplateCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceTemplateCreate>>
>;
export type ServiceTemplateCreateMutationBody = CreateServiceTemplate;
export type ServiceTemplateCreateMutationError =
	ErrorType<ErrorResponse | void>;

export const useServiceTemplateCreate = <
	TError = ErrorType<ErrorResponse | void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceTemplateCreate>>,
		TError,
		{ data: CreateServiceTemplate },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceTemplateCreate>>,
		{ data: CreateServiceTemplate }
	> = (props) => {
		const { data } = props ?? {};

		return serviceTemplateCreate(data);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceTemplateCreate>>,
		TError,
		{ data: CreateServiceTemplate },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Update a service template
 * @summary Update a service template
 */
export const serviceTemplateUpdate = (
	updateServiceTemplate: UpdateServiceTemplate
) => {
	return customInstance<ServiceTemplateRecord>({
		url: `/api/v1/service-templates`,
		method: 'patch',
		headers: { 'Content-Type': 'application/json' },
		data: updateServiceTemplate,
	});
};

export type ServiceTemplateUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceTemplateUpdate>>
>;
export type ServiceTemplateUpdateMutationBody = UpdateServiceTemplate;
export type ServiceTemplateUpdateMutationError =
	ErrorType<ErrorResponse | void>;

export const useServiceTemplateUpdate = <
	TError = ErrorType<ErrorResponse | void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceTemplateUpdate>>,
		TError,
		{ data: UpdateServiceTemplate },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceTemplateUpdate>>,
		{ data: UpdateServiceTemplate }
	> = (props) => {
		const { data } = props ?? {};

		return serviceTemplateUpdate(data);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceTemplateUpdate>>,
		TError,
		{ data: UpdateServiceTemplate },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Deletes a service template by its id
 * @summary Deletes a service template
 */
export const serviceTemplateDelete = (serviceTemplateId: number) => {
	return customInstance<void>({
		url: `/api/v1/service-templates/${serviceTemplateId}`,
		method: 'delete',
	});
};

export type ServiceTemplateDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceTemplateDelete>>
>;

export type ServiceTemplateDeleteMutationError = ErrorType<unknown>;

export const useServiceTemplateDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceTemplateDelete>>,
		TError,
		{ serviceTemplateId: number },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceTemplateDelete>>,
		{ serviceTemplateId: number }
	> = (props) => {
		const { serviceTemplateId } = props ?? {};

		return serviceTemplateDelete(serviceTemplateId);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceTemplateDelete>>,
		TError,
		{ serviceTemplateId: number },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Get a service template by its id
 * @summary Get a service template
 */
export const serviceTemplateGet = (
	serviceTemplateId: number,
	signal?: AbortSignal
) => {
	return customInstance<ServiceTemplateRecord>({
		url: `/api/v1/service-templates/${serviceTemplateId}`,
		method: 'get',
		signal,
	});
};

export const getServiceTemplateGetQueryKey = (serviceTemplateId: number) => [
	`/api/v1/service-templates/${serviceTemplateId}`,
];

export type ServiceTemplateGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceTemplateGet>>
>;
export type ServiceTemplateGetQueryError = ErrorType<void>;

export const useServiceTemplateGet = <
	TData = Awaited<ReturnType<typeof serviceTemplateGet>>,
	TError = ErrorType<void>
>(
	serviceTemplateId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceTemplateGet>>,
			TError,
			TData
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getServiceTemplateGetQueryKey(serviceTemplateId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof serviceTemplateGet>>
	> = ({ signal }) => serviceTemplateGet(serviceTemplateId, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceTemplateGet>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceTemplateId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
