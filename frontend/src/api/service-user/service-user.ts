/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	useQuery,
	useMutation,
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from 'react-query';
import type {
	ServiceUserRecord,
	CreateServiceUserRequest,
	NotFoundResult,
} from '.././models';
import { customInstance, ErrorType } from '.././axios';

/**
 * @summary Create a new service user
 */
export const serviceUserCreate = (
	createServiceUserRequest: CreateServiceUserRequest
) => {
	return customInstance<ServiceUserRecord>({
		url: `/api/v1/service-users`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: createServiceUserRequest,
	});
};

export type ServiceUserCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceUserCreate>>
>;
export type ServiceUserCreateMutationBody = CreateServiceUserRequest;
export type ServiceUserCreateMutationError = ErrorType<void>;

export const useServiceUserCreate = <
	TError = ErrorType<void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceUserCreate>>,
		TError,
		{ data: CreateServiceUserRequest },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceUserCreate>>,
		{ data: CreateServiceUserRequest }
	> = (props) => {
		const { data } = props ?? {};

		return serviceUserCreate(data);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceUserCreate>>,
		TError,
		{ data: CreateServiceUserRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * @summary Deletes a service user
 */
export const serviceUserDelete = (serviceUserId: number) => {
	return customInstance<void>({
		url: `/api/v1/service-users/${serviceUserId}`,
		method: 'delete',
	});
};

export type ServiceUserDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceUserDelete>>
>;

export type ServiceUserDeleteMutationError = ErrorType<unknown>;

export const useServiceUserDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceUserDelete>>,
		TError,
		{ serviceUserId: number },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceUserDelete>>,
		{ serviceUserId: number }
	> = (props) => {
		const { serviceUserId } = props ?? {};

		return serviceUserDelete(serviceUserId);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceUserDelete>>,
		TError,
		{ serviceUserId: number },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * @summary Get a service user by its id
 */
export const serviceUserGetById = (
	serviceUserId: number,
	signal?: AbortSignal
) => {
	return customInstance<ServiceUserRecord>({
		url: `/api/v1/service-users/${serviceUserId}`,
		method: 'get',
		signal,
	});
};

export const getServiceUserGetByIdQueryKey = (serviceUserId: number) => [
	`/api/v1/service-users/${serviceUserId}`,
];

export type ServiceUserGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceUserGetById>>
>;
export type ServiceUserGetByIdQueryError = ErrorType<void | NotFoundResult>;

export const useServiceUserGetById = <
	TData = Awaited<ReturnType<typeof serviceUserGetById>>,
	TError = ErrorType<void | NotFoundResult>
>(
	serviceUserId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceUserGetById>>,
			TError,
			TData
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getServiceUserGetByIdQueryKey(serviceUserId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof serviceUserGetById>>
	> = ({ signal }) => serviceUserGetById(serviceUserId, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceUserGetById>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceUserId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
