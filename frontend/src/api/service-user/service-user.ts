/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	MutationFunction,
	QueryFunction,
	QueryKey,
	useMutation,
	UseMutationOptions,
	useQuery,
	UseQueryOptions,
	UseQueryResult,
} from 'react-query';
import { customInstance, ErrorType } from '.././axios';
import type {
	CreateServiceUserRequest,
	NotFoundResult,
	ServiceUserRecord,
} from '.././models';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
	config: any,
	args: infer P
) => any
	? P
	: never;

/**
 * @summary Create a new service user
 */
export const serviceUserCreate = (
	createServiceUserRequest: CreateServiceUserRequest,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<ServiceUserRecord>(
		{
			url: `/api/v1/service-users`,
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			data: createServiceUserRequest,
		},
		options
	);
};

export type ServiceUserCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceUserCreate>>
>;
export type ServiceUserCreateMutationBody = CreateServiceUserRequest;
export type ServiceUserCreateMutationError = ErrorType<void>;

export const useServiceUserCreate = <
	TError = ErrorType<void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceUserCreate>>,
		TError,
		{ data: CreateServiceUserRequest },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceUserCreate>>,
		{ data: CreateServiceUserRequest }
	> = (props) => {
		const { data } = props ?? {};

		return serviceUserCreate(data, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceUserCreate>>,
		TError,
		{ data: CreateServiceUserRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * @summary Deletes a service user
 */
export const serviceUserDelete = (
	serviceUserId: number,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<void>(
		{ url: `/api/v1/service-users/${serviceUserId}`, method: 'delete' },
		options
	);
};

export type ServiceUserDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceUserDelete>>
>;

export type ServiceUserDeleteMutationError = ErrorType<unknown>;

export const useServiceUserDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceUserDelete>>,
		TError,
		{ serviceUserId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceUserDelete>>,
		{ serviceUserId: number }
	> = (props) => {
		const { serviceUserId } = props ?? {};

		return serviceUserDelete(serviceUserId, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceUserDelete>>,
		TError,
		{ serviceUserId: number },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * @summary Get a service user by its id
 */
export const serviceUserGetById = (
	serviceUserId: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ServiceUserRecord>(
		{
			url: `/api/v1/service-users/${serviceUserId}`,
			method: 'get',
			signal,
		},
		options
	);
};

export const getServiceUserGetByIdQueryKey = (serviceUserId: number) => [
	`/api/v1/service-users/${serviceUserId}`,
];

export type ServiceUserGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceUserGetById>>
>;
export type ServiceUserGetByIdQueryError = ErrorType<void | NotFoundResult>;

export const useServiceUserGetById = <
	TData = Awaited<ReturnType<typeof serviceUserGetById>>,
	TError = ErrorType<void | NotFoundResult>
>(
	serviceUserId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceUserGetById>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getServiceUserGetByIdQueryKey(serviceUserId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof serviceUserGetById>>
	> = ({ signal }) =>
		serviceUserGetById(serviceUserId, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceUserGetById>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceUserId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
