/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	useQuery,
	useMutation,
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from 'react-query';
import type {
	ReleaseRecord,
	CreateReleaseRequest,
	UpdateReleaseRequest,
} from '.././models';
import { customInstance, ErrorType } from '.././axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
	config: any,
	args: infer P
) => any
	? P
	: never;

/**
 * Creates a new Release
 * @summary Creates a new Release
 */
export const releaseCreate = (
	createReleaseRequest: CreateReleaseRequest,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<ReleaseRecord>(
		{
			url: `/releases`,
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			data: createReleaseRequest,
		},
		options
	);
};

export type ReleaseCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof releaseCreate>>
>;
export type ReleaseCreateMutationBody = CreateReleaseRequest;
export type ReleaseCreateMutationError = ErrorType<void>;

export const useReleaseCreate = <
	TError = ErrorType<void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof releaseCreate>>,
		TError,
		{ data: CreateReleaseRequest },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof releaseCreate>>,
		{ data: CreateReleaseRequest }
	> = (props) => {
		const { data } = props ?? {};

		return releaseCreate(data, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof releaseCreate>>,
		TError,
		{ data: CreateReleaseRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Deletes a release
 * @summary Deletes a release
 */
export const releaseDelete = (
	releaseId: number,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<void>(
		{ url: `/releases/${releaseId}`, method: 'delete' },
		options
	);
};

export type ReleaseDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof releaseDelete>>
>;

export type ReleaseDeleteMutationError = ErrorType<unknown>;

export const useReleaseDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof releaseDelete>>,
		TError,
		{ releaseId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof releaseDelete>>,
		{ releaseId: number }
	> = (props) => {
		const { releaseId } = props ?? {};

		return releaseDelete(releaseId, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof releaseDelete>>,
		TError,
		{ releaseId: number },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Gets a single Release by ReleaseId
 * @summary Gets a single Release
 */
export const releasesGetById = (
	releaseId: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ReleaseRecord>(
		{ url: `/releases/${releaseId}`, method: 'get', signal },
		options
	);
};

export const getReleasesGetByIdQueryKey = (releaseId: number) => [
	`/releases/${releaseId}`,
];

export type ReleasesGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof releasesGetById>>
>;
export type ReleasesGetByIdQueryError = ErrorType<void>;

export const useReleasesGetById = <
	TData = Awaited<ReturnType<typeof releasesGetById>>,
	TError = ErrorType<void>
>(
	releaseId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof releasesGetById>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReleasesGetByIdQueryKey(releaseId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof releasesGetById>>
	> = ({ signal }) => releasesGetById(releaseId, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof releasesGetById>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!releaseId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};

/**
 * Updates a Release
 * @summary Updates a Release
 */
export const releaseUpdate = (
	releaseId: string,
	updateReleaseRequest: UpdateReleaseRequest,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<ReleaseRecord>(
		{
			url: `/releases/${releaseId}`,
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			data: updateReleaseRequest,
		},
		options
	);
};

export type ReleaseUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof releaseUpdate>>
>;
export type ReleaseUpdateMutationBody = UpdateReleaseRequest;
export type ReleaseUpdateMutationError = ErrorType<void>;

export const useReleaseUpdate = <
	TError = ErrorType<void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof releaseUpdate>>,
		TError,
		{ releaseId: string; data: UpdateReleaseRequest },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof releaseUpdate>>,
		{ releaseId: string; data: UpdateReleaseRequest }
	> = (props) => {
		const { releaseId, data } = props ?? {};

		return releaseUpdate(releaseId, data, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof releaseUpdate>>,
		TError,
		{ releaseId: string; data: UpdateReleaseRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * @summary Gets a list of all Releases
 */
export const releasesList = (
	serviceId: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ReleaseRecord[]>(
		{ url: `/${serviceId}/releases`, method: 'get', signal },
		options
	);
};

export const getReleasesListQueryKey = (serviceId: number) => [
	`/${serviceId}/releases`,
];

export type ReleasesListQueryResult = NonNullable<
	Awaited<ReturnType<typeof releasesList>>
>;
export type ReleasesListQueryError = ErrorType<void>;

export const useReleasesList = <
	TData = Awaited<ReturnType<typeof releasesList>>,
	TError = ErrorType<void>
>(
	serviceId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof releasesList>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReleasesListQueryKey(serviceId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof releasesList>>> = ({
		signal,
	}) => releasesList(serviceId, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof releasesList>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
