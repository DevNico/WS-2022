{
	"openapi": "3.0.1",
	"info": {
		"title": "Service Release Manager API",
		"version": "v1"
	},
	"paths": {
		"/api/v1/service-users": {
			"post": {
				"tags": ["ServiceUser"],
				"summary": "Create a new service user",
				"operationId": "ServiceUser.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceUserRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceUserRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceUserRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The service user was created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceUserRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceUserRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceUserRecord"
								}
							}
						}
					},
					"404": {
						"description": "One of the dependencies was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/service-templates": {
			"post": {
				"tags": ["ServiceTemplate"],
				"summary": "Add a new service template",
				"description": "Create a new service template",
				"operationId": "ServiceTemplate.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceTemplate"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceTemplate"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceTemplate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The service template was created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							}
						}
					},
					"400": {
						"description": "A parameter was null or invalid",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "A service template with the same name already exists"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"patch": {
				"tags": ["ServiceTemplate"],
				"summary": "Update a service template",
				"description": "Update a service template",
				"operationId": "ServiceTemplate.Update",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateServiceTemplate"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateServiceTemplate"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateServiceTemplate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The service template was updated",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							}
						}
					},
					"400": {
						"description": "The request was invalid",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "A service template with the specified name was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/services": {
			"post": {
				"tags": ["Service"],
				"summary": "Create a service",
				"description": "Create a service",
				"operationId": "Service.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The service was created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							}
						}
					},
					"400": {
						"description": "A parameter was null or invalid",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "A service with the same name and organisation already exists",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/service-roles": {
			"post": {
				"tags": ["ServiceRole"],
				"summary": "Creates a new service role",
				"operationId": "ServiceRole.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceRole"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceRole"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateServiceRole"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The service role was created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRoleRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRoleRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRoleRecord"
								}
							}
						}
					},
					"408": {
						"description": "A role with the same name already exists"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/release-triggers": {
			"post": {
				"tags": ["ReleaseTrigger"],
				"summary": "Create a release trigger",
				"description": "Create a release trigger",
				"operationId": "ReleaseTrigger.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateReleaseTriggerRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateReleaseTriggerRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateReleaseTriggerRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The release trigger was created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseTriggerRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseTriggerRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseTriggerRecord"
								}
							}
						}
					},
					"400": {
						"description": "A parameter was null or invalid",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/releases": {
			"post": {
				"tags": ["Release"],
				"summary": "Creates a new Release",
				"description": "Creates a new Release",
				"operationId": "Release.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateReleaseRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateReleaseRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateReleaseRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The Release was created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							}
						}
					},
					"400": {
						"description": "Service or locale id not found"
					},
					"409": {
						"description": "There already is an active release for this service"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisation-users": {
			"post": {
				"tags": ["OrganisationUser"],
				"summary": "Creates a new OrganisationUser",
				"description": "Creates a new OrganisationUser",
				"operationId": "OrganisationUser.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationUserRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationUserRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationUserRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationUserRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationUserRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationUserRecord"
								}
							}
						}
					},
					"400": {
						"description": "Organisation or email not found"
					},
					"424": {
						"description": "The keycloak request failed"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations": {
			"post": {
				"tags": ["Organisation"],
				"summary": "Creates a new Organisation",
				"description": "Creates a new Organisation",
				"operationId": "Organisation.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Organisation created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							}
						}
					},
					"400": {
						"description": "Invalid request",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["Organisation"],
				"summary": "Gets a list of all Organisations",
				"operationId": "Organisations.List",
				"parameters": [
					{
						"name": "includeDeactivated",
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Organisations found",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRecord"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisation-roles": {
			"post": {
				"tags": ["OrganisationRole"],
				"summary": "Creates a new OrganisationRole",
				"description": "Creates a new OrganisationRole",
				"operationId": "OrganisationRole.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationRoleRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationRoleRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrganisationRoleRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRoleRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRoleRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRoleRecord"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/locales": {
			"post": {
				"tags": ["Locale"],
				"summary": "Create a new locale",
				"description": "Create a new locale",
				"operationId": "Locale.Create",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateLocaleRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateLocaleRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/CreateLocaleRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The locale was created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/LocaleRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LocaleRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/LocaleRecord"
								}
							}
						}
					},
					"400": {
						"description": "The request was invalid"
					},
					"404": {
						"description": "The service was not found"
					},
					"409": {
						"description": "The locale already exists"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/service-users/{ServiceUserId}": {
			"delete": {
				"tags": ["ServiceUser"],
				"summary": "Deletes a service user",
				"operationId": "ServiceUser.Delete",
				"parameters": [
					{
						"name": "ServiceUserId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The user was disabled"
					},
					"404": {
						"description": "A user with the given id does not exist"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["ServiceUser"],
				"summary": "Get a service user by its id",
				"operationId": "ServiceUser.GetById",
				"parameters": [
					{
						"name": "ServiceUserId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Service user found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceUserRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceUserRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceUserRecord"
								}
							}
						}
					},
					"404": {
						"description": "Service user not found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResult"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResult"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResult"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/service-templates/{ServiceTemplateId}": {
			"delete": {
				"tags": ["ServiceTemplate"],
				"summary": "Deletes a service template",
				"description": "Deletes a service template by its id",
				"operationId": "ServiceTemplate.Delete",
				"parameters": [
					{
						"name": "ServiceTemplateId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"201": {
						"description": "The service template was deleted"
					},
					"404": {
						"description": "A service template with the given id was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["ServiceTemplate"],
				"summary": "Get a service template",
				"description": "Get a service template by its id",
				"operationId": "ServiceTemplate.Get",
				"parameters": [
					{
						"name": "ServiceTemplateId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The service template was found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							}
						}
					},
					"404": {
						"description": "The service template was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/services/{ServiceId}": {
			"delete": {
				"tags": ["Service"],
				"summary": "Deletes a service by its id",
				"description": "Deletes a service",
				"operationId": "Service.Delete",
				"parameters": [
					{
						"name": "ServiceId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The service was deleted"
					},
					"404": {
						"description": "A service with the given id was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["Service"],
				"summary": "Get a service",
				"description": "Get a service by its id",
				"operationId": "Service.GetById",
				"parameters": [
					{
						"name": "ServiceId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The service was found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							}
						}
					},
					"400": {
						"description": "The service was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/service-roles/{ServiceRoleId}": {
			"delete": {
				"tags": ["ServiceRole"],
				"summary": "Delete a service role",
				"operationId": "ServiceRole.Delete",
				"parameters": [
					{
						"name": "ServiceRoleId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeleteServiceRole"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/DeleteServiceRole"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/DeleteServiceRole"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The service role was deactivated"
					},
					"404": {
						"description": "The service role was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["ServiceRole"],
				"summary": "Get a service role by its id",
				"operationId": "ServiceRole.GetById",
				"parameters": [
					{
						"name": "ServiceRoleId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetServiceRoleById"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/GetServiceRoleById"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/GetServiceRoleById"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRoleRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRoleRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRoleRecord"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/release-triggers/{ReleaseTriggerId}": {
			"delete": {
				"tags": ["ReleaseTrigger"],
				"summary": "Deletes a release trigger by its id",
				"description": "Deletes a release trigger",
				"operationId": "ReleaseTrigger.Delete",
				"parameters": [
					{
						"name": "ReleaseTriggerId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The release trigger was deleted"
					},
					"404": {
						"description": "A release trigger with the given id was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["ReleaseTrigger"],
				"summary": "Get a release trigger",
				"description": "Get a release trigger by its id",
				"operationId": "ReleaseTrigger.GetById",
				"parameters": [
					{
						"name": "ReleaseTriggerId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The release trigger was found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseTriggerRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseTriggerRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseTriggerRecord"
								}
							}
						}
					},
					"404": {
						"description": "The release trigger was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/releases/{ReleaseId}": {
			"delete": {
				"tags": ["Release"],
				"summary": "Deletes a release",
				"description": "Deletes a release",
				"operationId": "Release.Delete",
				"parameters": [
					{
						"name": "ReleaseId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["Release"],
				"summary": "Gets a single Release",
				"description": "Gets a single Release by ReleaseId",
				"operationId": "Releases.GetById",
				"parameters": [
					{
						"name": "ReleaseId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"post": {
				"tags": ["Release"],
				"summary": "Updates a Release",
				"description": "Updates a Release",
				"operationId": "Release.Update",
				"parameters": [
					{
						"name": "ReleaseId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateReleaseRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateReleaseRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateReleaseRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The Release was created",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ReleaseRecord"
								}
							}
						}
					},
					"404": {
						"description": "Release not found"
					},
					"400": {
						"description": "locale id not found"
					},
					"409": {
						"description": "Release is approved and cannot be updated"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisation-users/{OrganisationUserId}": {
			"delete": {
				"tags": ["OrganisationUser"],
				"summary": "Deletes a OrganisationUser",
				"description": "Deletes a OrganisationUser",
				"operationId": "OrganisationUser.Delete",
				"parameters": [
					{
						"name": "OrganisationUserId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["OrganisationUser"],
				"summary": "Gets a single OrganisationUser",
				"description": "Gets a single OrganisationUser by UserId",
				"operationId": "Organisations.GetByUserId",
				"parameters": [
					{
						"name": "OrganisationUserId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationUserRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationUserRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationUserRecord"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/{OrganisationRouteName}": {
			"delete": {
				"tags": ["Organisation"],
				"summary": "Deletes a Organisation",
				"description": "Deletes a Organisation",
				"operationId": "Organisations.Delete",
				"parameters": [
					{
						"name": "OrganisationRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Organisation deleted"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["Organisation"],
				"summary": "Gets a single Organisation",
				"description": "Gets a single Organisation by its route name",
				"operationId": "Organisations.GetByRouteName",
				"parameters": [
					{
						"name": "OrganisationRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Organisation found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisation-roles/{OrganisationRoleId}": {
			"delete": {
				"tags": ["OrganisationRole"],
				"summary": "Deletes a OrganisationRole",
				"description": "Deletes a OrganisationRole",
				"operationId": "OrganisationRoles.Delete",
				"parameters": [
					{
						"name": "OrganisationRoleId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"201": {
						"description": "OrganisationRole deleted"
					},
					"404": {
						"description": "OrganisationRole not found"
					},
					"409": {
						"description": "A User exists depending on this role"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/locales/{LocaleId}": {
			"delete": {
				"tags": ["Locale"],
				"summary": "Delete a locale",
				"description": "Deletes a locale from the database",
				"operationId": "Locale.Delete",
				"parameters": [
					{
						"name": "LocaleId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Locale deleted"
					},
					"404": {
						"description": "The locale or service was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			},
			"get": {
				"tags": ["Locale"],
				"summary": "Get a locale by id",
				"description": "Get a locale by id",
				"operationId": "Locale.GetById",
				"parameters": [
					{
						"name": "LocaleId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Locale found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/LocaleRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LocaleRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/LocaleRecord"
								}
							}
						}
					},
					"404": {
						"description": "Locale not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/{OrganisationId}": {
			"get": {
				"tags": ["Organisation"],
				"summary": "Gets a single Organisation",
				"description": "Gets a single Organisation by its route name",
				"operationId": "Organisations.GetById",
				"parameters": [
					{
						"name": "OrganisationId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Organisation found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganisationRecord"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/services/{ServiceRouteName}": {
			"get": {
				"tags": ["Service"],
				"summary": "Get a service",
				"description": "Get a service by its route name",
				"operationId": "Service.GetByRouteName",
				"parameters": [
					{
						"name": "ServiceRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The service was found",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceRecord"
								}
							}
						}
					},
					"404": {
						"description": "The service was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/services/{ServiceId}/releases": {
			"get": {
				"tags": ["Service"],
				"summary": "Gets a list of all Releases",
				"operationId": "Services.ListReleases",
				"parameters": [
					{
						"name": "ServiceId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "List of Releases",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ReleaseRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ReleaseRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ReleaseRecord"
									}
								}
							}
						}
					},
					"404": {
						"description": "Service id not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/services/{ServiceRouteName}/locales": {
			"get": {
				"tags": ["Service"],
				"summary": "List all locales",
				"operationId": "Locales.List",
				"parameters": [
					{
						"name": "ServiceRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Locales found",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LocaleRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LocaleRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LocaleRecord"
									}
								}
							}
						}
					},
					"404": {
						"description": "The service was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/me": {
			"get": {
				"tags": ["Organisation"],
				"summary": "Get all Organisations the current user is a member of",
				"operationId": "Organisations.Me",
				"responses": {
					"200": {
						"description": "Organisations found",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRecord"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/{OrganisationRouteName}/roles": {
			"get": {
				"tags": ["OrganisationRole"],
				"summary": "Gets a list of all OrganisationRoles",
				"operationId": "OrganisationRoles.List",
				"parameters": [
					{
						"name": "OrganisationRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OrganisationRoles found",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRoleRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRoleRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationRoleRecord"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/{OrganisationRouteName}/users": {
			"get": {
				"tags": ["OrganisationUser"],
				"summary": "Gets a list of all OrganisationUsers",
				"operationId": "OrganisationUser.List",
				"parameters": [
					{
						"name": "OrganisationRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OrganisationUsers found",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationUserRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationUserRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrganisationUserRecord"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/services/{ServiceId}/release-triggers": {
			"get": {
				"tags": ["Service"],
				"summary": "List all release triggers",
				"description": "List all release triggers",
				"operationId": "Service.ListReleaseTriggers",
				"parameters": [
					{
						"name": "ServiceId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ReleaseTriggerRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ReleaseTriggerRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ReleaseTriggerRecord"
									}
								}
							}
						}
					},
					"400": {
						"description": "The service was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/{OrganisationRouteName}/service-roles": {
			"get": {
				"tags": ["Organisation"],
				"summary": "Get all service roles by their id",
				"operationId": "Organisation.ListServiceRoles",
				"parameters": [
					{
						"name": "OrganisationRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRoleRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRoleRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRoleRecord"
									}
								}
							}
						}
					},
					"404": {
						"description": "The organisation does not exist"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/{OrganisationRouteName}/services": {
			"get": {
				"tags": ["Organisation"],
				"summary": "List all services",
				"description": "List all services",
				"operationId": "Organisation.ListServices",
				"parameters": [
					{
						"name": "OrganisationRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRecord"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/{OrganisationRouteName}/services/me": {
			"get": {
				"tags": ["Organisation"],
				"summary": "Get the services this user can access",
				"operationId": "Organisation.ServicesMe",
				"parameters": [
					{
						"name": "OrganisationRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceRecord"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/services/{ServiceRouteName}/services-template": {
			"get": {
				"tags": ["Service"],
				"summary": "Get the service's service template",
				"description": "Get the service's service template",
				"operationId": "Service.GetServiceTemplate",
				"parameters": [
					{
						"name": "ServiceRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text/plain": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							},
							"text/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceTemplateRecord"
								}
							}
						}
					},
					"400": {
						"description": "Not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/organisations/{OrganisationRouteName}/services-templates": {
			"get": {
				"tags": ["Organisation"],
				"summary": "List all service templates",
				"description": "List all service templates",
				"operationId": "Organisation.ListServiceTemplates",
				"parameters": [
					{
						"name": "OrganisationRouteName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceTemplateRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceTemplateRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceTemplateRecord"
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid ID"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		},
		"/api/v1/services/{ServiceId}/users": {
			"get": {
				"tags": ["Service"],
				"summary": "List all users for a service",
				"operationId": "Services.ListUsers",
				"parameters": [
					{
						"name": "ServiceId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ListUsersByServiceId"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/ListUsersByServiceId"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/ListUsersByServiceId"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The users for the service",
						"content": {
							"text/plain": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceUserRecord"
									}
								}
							},
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceUserRecord"
									}
								}
							},
							"text/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ServiceUserRecord"
									}
								}
							}
						}
					},
					"404": {
						"description": "The service was not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"OAuth2": ["OAuth2"]
					}
				]
			}
		}
	},
	"components": {
		"schemas": {
			"CreateLocaleRequest": {
				"required": ["serviceId", "tag"],
				"type": "object",
				"properties": {
					"serviceId": {
						"type": "integer",
						"format": "int32"
					},
					"tag": {
						"type": "string"
					},
					"isDefault": {
						"type": "boolean",
						"default": false,
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"CreateOrganisationRequest": {
				"required": ["name"],
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					}
				},
				"additionalProperties": false
			},
			"CreateOrganisationRoleRequest": {
				"required": [
					"name",
					"organisationId",
					"serviceDelete",
					"serviceWrite",
					"userDelete",
					"userRead",
					"userWrite"
				],
				"type": "object",
				"properties": {
					"organisationId": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"maxLength": 50,
						"minLength": 5,
						"type": "string"
					},
					"serviceWrite": {
						"type": "boolean"
					},
					"serviceDelete": {
						"type": "boolean"
					},
					"userRead": {
						"type": "boolean"
					},
					"userWrite": {
						"type": "boolean"
					},
					"userDelete": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"CreateOrganisationUserRequest": {
				"required": [
					"email",
					"firstName",
					"lastName",
					"organisationId",
					"roleId"
				],
				"type": "object",
				"properties": {
					"organisationId": {
						"type": "integer",
						"format": "int32"
					},
					"email": {
						"type": "string",
						"format": "email"
					},
					"firstName": {
						"maxLength": 50,
						"minLength": 5,
						"type": "string"
					},
					"lastName": {
						"maxLength": 50,
						"minLength": 5,
						"type": "string"
					},
					"roleId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"CreateReleaseLocalisedMetadata": {
				"required": ["localeId", "metadata"],
				"type": "object",
				"properties": {
					"metadata": {
						"type": "string"
					},
					"localeId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"CreateReleaseRequest": {
				"required": [
					"localisedMetadataList",
					"metaData",
					"serviceId",
					"version"
				],
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"metaData": {
						"type": "string"
					},
					"localisedMetadataList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CreateReleaseLocalisedMetadata"
						}
					},
					"serviceId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"CreateReleaseTriggerRequest": {
				"required": ["event", "name", "serviceId", "url"],
				"type": "object",
				"properties": {
					"name": {
						"maxLength": 50,
						"type": "string"
					},
					"event": {
						"maxLength": 50,
						"type": "string"
					},
					"url": {
						"maxLength": 250,
						"type": "string"
					},
					"serviceId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"CreateServiceRequest": {
				"required": ["description", "name", "serviceTemplateId"],
				"type": "object",
				"properties": {
					"name": {
						"maxLength": 50,
						"minLength": 2,
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"serviceTemplateId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"CreateServiceRole": {
				"required": [
					"name",
					"organisationId",
					"releaseApprove",
					"releaseCreate",
					"releaseLocalizedMetadataEdit",
					"releaseMetadataEdit",
					"releasePublish"
				],
				"type": "object",
				"properties": {
					"organisationId": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"maxLength": 50,
						"minLength": 2,
						"type": "string"
					},
					"releaseCreate": {
						"type": "boolean"
					},
					"releaseApprove": {
						"type": "boolean"
					},
					"releasePublish": {
						"type": "boolean"
					},
					"releaseMetadataEdit": {
						"type": "boolean"
					},
					"releaseLocalizedMetadataEdit": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"CreateServiceTemplate": {
				"required": [
					"localizedMetadata",
					"name",
					"organisationId",
					"staticMetadata"
				],
				"type": "object",
				"properties": {
					"organisationId": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"staticMetadata": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetadataArrayElement"
						}
					},
					"localizedMetadata": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetadataArrayElement"
						}
					}
				},
				"additionalProperties": false
			},
			"CreateServiceUserRequest": {
				"required": [
					"organisationUserId",
					"serviceId",
					"serviceRoleId"
				],
				"type": "object",
				"properties": {
					"serviceId": {
						"type": "integer",
						"format": "int32"
					},
					"organisationUserId": {
						"type": "integer",
						"format": "int32"
					},
					"serviceRoleId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"DeleteServiceRole": {
				"type": "object",
				"properties": {
					"serviceRoleId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"GetServiceRoleById": {
				"type": "object",
				"properties": {
					"serviceRoleId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"ListUsersByServiceId": {
				"type": "object",
				"properties": {
					"serviceId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"LocaleRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"tag": {
						"type": "string",
						"nullable": true
					},
					"isDefault": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"MetadataArrayElement": {
				"type": "object",
				"properties": {
					"index": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"nullable": true
					},
					"label": {
						"type": "string",
						"nullable": true
					},
					"minLength": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"maxLength": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"required": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"NotFoundResult": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"OrganisationRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"routeName": {
						"type": "string",
						"nullable": true
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"OrganisationRoleRecord": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"nullable": true
					},
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"serviceWrite": {
						"type": "boolean"
					},
					"serviceDelete": {
						"type": "boolean"
					},
					"userRead": {
						"type": "boolean"
					},
					"userWrite": {
						"type": "boolean"
					},
					"userDelete": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"OrganisationUserRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"userId": {
						"type": "string",
						"nullable": true
					},
					"email": {
						"type": "string",
						"nullable": true
					},
					"firstName": {
						"type": "string",
						"nullable": true
					},
					"lastName": {
						"type": "string",
						"nullable": true
					},
					"organisationRole": {
						"$ref": "#/components/schemas/OrganisationRoleRecord"
					}
				},
				"additionalProperties": false
			},
			"ReleaseLocalisedMetadataRecord": {
				"type": "object",
				"properties": {
					"metadata": {
						"type": "string",
						"nullable": true
					},
					"localeId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"ReleaseRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"version": {
						"type": "string",
						"nullable": true
					},
					"serviceId": {
						"type": "integer",
						"format": "int32"
					},
					"metadata": {
						"type": "string",
						"nullable": true
					},
					"localisedMetadata": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ReleaseLocalisedMetadataRecord"
						},
						"nullable": true
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"ReleaseTriggerRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"event": {
						"type": "string",
						"nullable": true
					},
					"url": {
						"type": "string",
						"nullable": true
					},
					"serviceId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"ServiceRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"routeName": {
						"type": "string",
						"nullable": true
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"latestRelease": {
						"$ref": "#/components/schemas/ReleaseRecord"
					},
					"organisationId": {
						"type": "integer",
						"format": "int32"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"ServiceRoleRecord": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"nullable": true
					},
					"releaseCreate": {
						"type": "boolean"
					},
					"releaseApprove": {
						"type": "boolean"
					},
					"releasePublish": {
						"type": "boolean"
					},
					"releaseMetadataEdit": {
						"type": "boolean"
					},
					"releaseLocalizedMetadataEdit": {
						"type": "boolean"
					},
					"organisationId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"ServiceTemplateRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"staticMetadata": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetadataArrayElement"
						},
						"nullable": true
					},
					"localizedMetadata": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetadataArrayElement"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"ServiceUserRecord": {
				"type": "object",
				"properties": {
					"serviceRole": {
						"type": "integer",
						"format": "int32"
					},
					"organisationUser": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"UpdateReleaseLocalisedMetadata": {
				"required": ["localeId", "metadata"],
				"type": "object",
				"properties": {
					"metadata": {
						"type": "string"
					},
					"localeId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"UpdateReleaseRequest": {
				"required": ["localisedMetadataList", "metaData"],
				"type": "object",
				"properties": {
					"releaseId": {
						"type": "integer",
						"format": "int32"
					},
					"metaData": {
						"type": "string"
					},
					"localisedMetadataList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/UpdateReleaseLocalisedMetadata"
						}
					}
				},
				"additionalProperties": false
			},
			"UpdateServiceTemplate": {
				"required": ["localizedMetadata", "name", "staticMetadata"],
				"type": "object",
				"properties": {
					"serviceTemplateId": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"staticMetadata": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetadataArrayElement"
						}
					},
					"localizedMetadata": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetadataArrayElement"
						}
					}
				},
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"OAuth2": {
				"type": "oauth2",
				"flows": {
					"authorizationCode": {
						"authorizationUrl": "https://idp.srm.k3s.devnico.cloud/realms/dev/protocol/openid-connect/auth",
						"tokenUrl": "https://idp.srm.k3s.devnico.cloud/realms/dev/protocol/openid-connect/token",
						"scopes": {}
					}
				}
			}
		}
	}
}
