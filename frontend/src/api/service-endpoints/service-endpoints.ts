/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	useQuery,
	useMutation,
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from 'react-query';
import type {
	ServiceRecord,
	ErrorResponse,
	CreateServiceRequest,
} from '.././models';
import { customInstance, ErrorType } from '.././axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
	config: any,
	args: infer P
) => any
	? P
	: never;

/**
 * Create a service
 * @summary Create a service
 */
export const serviceCreate = (
	createServiceRequest: CreateServiceRequest,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<ServiceRecord>(
		{
			url: `/api/v1/services`,
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			data: createServiceRequest,
		},
		options
	);
};

export type ServiceCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceCreate>>
>;
export type ServiceCreateMutationBody = CreateServiceRequest;
export type ServiceCreateMutationError = ErrorType<ErrorResponse | void>;

export const useServiceCreate = <
	TError = ErrorType<ErrorResponse | void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceCreate>>,
		TError,
		{ data: CreateServiceRequest },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceCreate>>,
		{ data: CreateServiceRequest }
	> = (props) => {
		const { data } = props ?? {};

		return serviceCreate(data, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceCreate>>,
		TError,
		{ data: CreateServiceRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Deletes a service
 * @summary Deletes a service by its id
 */
export const serviceDelete = (
	serviceId: number,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<void>(
		{ url: `/api/v1/services/${serviceId}`, method: 'delete' },
		options
	);
};

export type ServiceDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceDelete>>
>;

export type ServiceDeleteMutationError = ErrorType<unknown>;

export const useServiceDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceDelete>>,
		TError,
		{ serviceId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceDelete>>,
		{ serviceId: number }
	> = (props) => {
		const { serviceId } = props ?? {};

		return serviceDelete(serviceId, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceDelete>>,
		TError,
		{ serviceId: number },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Get a service by its id
 * @summary Get a service
 */
export const serviceGetById = (
	serviceId: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ServiceRecord>(
		{ url: `/api/v1/services/${serviceId}`, method: 'get', signal },
		options
	);
};

export const getServiceGetByIdQueryKey = (serviceId: number) => [
	`/api/v1/services/${serviceId}`,
];

export type ServiceGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceGetById>>
>;
export type ServiceGetByIdQueryError = ErrorType<void>;

export const useServiceGetById = <
	TData = Awaited<ReturnType<typeof serviceGetById>>,
	TError = ErrorType<void>
>(
	serviceId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceGetById>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getServiceGetByIdQueryKey(serviceId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof serviceGetById>>
	> = ({ signal }) => serviceGetById(serviceId, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceGetById>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};

/**
 * List all services
 * @summary List all services
 */
export const serviceList = (
	organisationRouteName: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ServiceRecord[]>(
		{
			url: `/api/v1/organisations/${organisationRouteName}/services`,
			method: 'get',
			signal,
		},
		options
	);
};

export const getServiceListQueryKey = (organisationRouteName: string) => [
	`/api/v1/organisations/${organisationRouteName}/services`,
];

export type ServiceListQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceList>>
>;
export type ServiceListQueryError = ErrorType<void>;

export const useServiceList = <
	TData = Awaited<ReturnType<typeof serviceList>>,
	TError = ErrorType<void>
>(
	organisationRouteName: string,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceList>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getServiceListQueryKey(organisationRouteName);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof serviceList>>> = ({
		signal,
	}) => serviceList(organisationRouteName, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceList>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!organisationRouteName, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
