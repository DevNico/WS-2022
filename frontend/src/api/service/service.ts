/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	useQuery,
	useMutation,
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from 'react-query';
import type {
	ServiceRecord,
	ErrorResponse,
	CreateServiceRequest,
	ReleaseRecord,
	LocaleRecord,
	ServiceTemplateRecord,
	ServiceUserRecord,
	ListUsersByServiceId,
} from '.././models';
import { customInstance, ErrorType } from '.././axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
	config: any,
	args: infer P
) => any
	? P
	: never;

/**
 * Create a service
 * @summary Create a service
 */
export const serviceCreate = (
	createServiceRequest: CreateServiceRequest,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<ServiceRecord>(
		{
			url: `/api/v1/services`,
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			data: createServiceRequest,
		},
		options
	);
};

export type ServiceCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceCreate>>
>;
export type ServiceCreateMutationBody = CreateServiceRequest;
export type ServiceCreateMutationError = ErrorType<ErrorResponse | void>;

export const useServiceCreate = <
	TError = ErrorType<ErrorResponse | void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceCreate>>,
		TError,
		{ data: CreateServiceRequest },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceCreate>>,
		{ data: CreateServiceRequest }
	> = (props) => {
		const { data } = props ?? {};

		return serviceCreate(data, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceCreate>>,
		TError,
		{ data: CreateServiceRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Deletes a service
 * @summary Deletes a service by its id
 */
export const serviceDelete = (
	serviceId: number,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<void>(
		{ url: `/api/v1/services/${serviceId}`, method: 'delete' },
		options
	);
};

export type ServiceDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceDelete>>
>;

export type ServiceDeleteMutationError = ErrorType<unknown>;

export const useServiceDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceDelete>>,
		TError,
		{ serviceId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceDelete>>,
		{ serviceId: number }
	> = (props) => {
		const { serviceId } = props ?? {};

		return serviceDelete(serviceId, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceDelete>>,
		TError,
		{ serviceId: number },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Get a service by its id
 * @summary Get a service
 */
export const serviceGetById = (
	serviceId: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ServiceRecord>(
		{ url: `/api/v1/services/${serviceId}`, method: 'get', signal },
		options
	);
};

export const getServiceGetByIdQueryKey = (serviceId: number) => [
	`/api/v1/services/${serviceId}`,
];

export type ServiceGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceGetById>>
>;
export type ServiceGetByIdQueryError = ErrorType<void>;

export const useServiceGetById = <
	TData = Awaited<ReturnType<typeof serviceGetById>>,
	TError = ErrorType<void>
>(
	serviceId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceGetById>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getServiceGetByIdQueryKey(serviceId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof serviceGetById>>
	> = ({ signal }) => serviceGetById(serviceId, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceGetById>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};

/**
 * Get a service by its route name
 * @summary Get a service
 */
export const serviceGetByRouteName = (
	serviceRouteName: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ServiceRecord>(
		{ url: `/api/v1/services/${serviceRouteName}`, method: 'get', signal },
		options
	);
};

export const getServiceGetByRouteNameQueryKey = (serviceRouteName: string) => [
	`/api/v1/services/${serviceRouteName}`,
];

export type ServiceGetByRouteNameQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceGetByRouteName>>
>;
export type ServiceGetByRouteNameQueryError = ErrorType<void>;

export const useServiceGetByRouteName = <
	TData = Awaited<ReturnType<typeof serviceGetByRouteName>>,
	TError = ErrorType<void>
>(
	serviceRouteName: string,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceGetByRouteName>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getServiceGetByRouteNameQueryKey(serviceRouteName);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof serviceGetByRouteName>>
	> = ({ signal }) =>
		serviceGetByRouteName(serviceRouteName, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceGetByRouteName>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceRouteName, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};

/**
 * @summary Gets a list of all Releases
 */
export const servicesListReleases = (
	serviceId: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ReleaseRecord[]>(
		{
			url: `/api/v1/services/${serviceId}/releases`,
			method: 'get',
			signal,
		},
		options
	);
};

export const getServicesListReleasesQueryKey = (serviceId: number) => [
	`/api/v1/services/${serviceId}/releases`,
];

export type ServicesListReleasesQueryResult = NonNullable<
	Awaited<ReturnType<typeof servicesListReleases>>
>;
export type ServicesListReleasesQueryError = ErrorType<void>;

export const useServicesListReleases = <
	TData = Awaited<ReturnType<typeof servicesListReleases>>,
	TError = ErrorType<void>
>(
	serviceId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof servicesListReleases>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getServicesListReleasesQueryKey(serviceId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof servicesListReleases>>
	> = ({ signal }) => servicesListReleases(serviceId, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof servicesListReleases>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};

/**
 * @summary List all locales
 */
export const localesList = (
	serviceRouteName: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<LocaleRecord[]>(
		{
			url: `/api/v1/services/${serviceRouteName}/locales`,
			method: 'get',
			signal,
		},
		options
	);
};

export const getLocalesListQueryKey = (serviceRouteName: string) => [
	`/api/v1/services/${serviceRouteName}/locales`,
];

export type LocalesListQueryResult = NonNullable<
	Awaited<ReturnType<typeof localesList>>
>;
export type LocalesListQueryError = ErrorType<void>;

export const useLocalesList = <
	TData = Awaited<ReturnType<typeof localesList>>,
	TError = ErrorType<void>
>(
	serviceRouteName: string,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof localesList>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getLocalesListQueryKey(serviceRouteName);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof localesList>>> = ({
		signal,
	}) => localesList(serviceRouteName, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof localesList>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceRouteName, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};

/**
 * @summary Get the services this user can access
 */
export const serviceMe = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ServiceRecord[]>(
		{ url: `/api/v1/services/me`, method: 'get', signal },
		options
	);
};

export const getServiceMeQueryKey = () => [`/api/v1/services/me`];

export type ServiceMeQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceMe>>
>;
export type ServiceMeQueryError = ErrorType<void>;

export const useServiceMe = <
	TData = Awaited<ReturnType<typeof serviceMe>>,
	TError = ErrorType<void>
>(options?: {
	query?: UseQueryOptions<
		Awaited<ReturnType<typeof serviceMe>>,
		TError,
		TData
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getServiceMeQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof serviceMe>>> = ({
		signal,
	}) => serviceMe(requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceMe>>,
		TError,
		TData
	>(queryKey, queryFn, queryOptions);

	return {
		queryKey,
		...query,
	};
};

/**
 * List all service templates
 * @summary List all service templates
 */
export const serviceListServiceTemplates = (
	serviceRouteName: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ServiceTemplateRecord[]>(
		{
			url: `/api/v1/services/${serviceRouteName}/services-templates`,
			method: 'get',
			signal,
		},
		options
	);
};

export const getServiceListServiceTemplatesQueryKey = (
	serviceRouteName: string
) => [`/api/v1/services/${serviceRouteName}/services-templates`];

export type ServiceListServiceTemplatesQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceListServiceTemplates>>
>;
export type ServiceListServiceTemplatesQueryError = ErrorType<void>;

export const useServiceListServiceTemplates = <
	TData = Awaited<ReturnType<typeof serviceListServiceTemplates>>,
	TError = ErrorType<void>
>(
	serviceRouteName: string,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceListServiceTemplates>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getServiceListServiceTemplatesQueryKey(serviceRouteName);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof serviceListServiceTemplates>>
	> = ({ signal }) =>
		serviceListServiceTemplates(serviceRouteName, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceListServiceTemplates>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceRouteName, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};

/**
 * @summary List all users for a service
 */
export const servicesListUsers = (
	serviceId: string,
	listUsersByServiceId: ListUsersByServiceId,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ServiceUserRecord[]>(
		{
			url: `/api/v1/services/${serviceId}/users`,
			method: 'get',
			signal,
			headers: { 'Content-Type': 'application/json' },
		},
		options
	);
};

export const getServicesListUsersQueryKey = (
	serviceId: string,
	listUsersByServiceId: ListUsersByServiceId
) => [`/api/v1/services/${serviceId}/users`, listUsersByServiceId];

export type ServicesListUsersQueryResult = NonNullable<
	Awaited<ReturnType<typeof servicesListUsers>>
>;
export type ServicesListUsersQueryError = ErrorType<void>;

export const useServicesListUsers = <
	TData = Awaited<ReturnType<typeof servicesListUsers>>,
	TError = ErrorType<void>
>(
	serviceId: string,
	listUsersByServiceId: ListUsersByServiceId,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof servicesListUsers>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getServicesListUsersQueryKey(serviceId, listUsersByServiceId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof servicesListUsers>>
	> = ({ signal }) =>
		servicesListUsers(
			serviceId,
			listUsersByServiceId,
			requestOptions,
			signal
		);

	const query = useQuery<
		Awaited<ReturnType<typeof servicesListUsers>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
