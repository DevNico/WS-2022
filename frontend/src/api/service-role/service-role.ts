/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	useQuery,
	useMutation,
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from 'react-query';
import type {
	ServiceRoleRecord,
	CreateServiceRole,
	DeleteServiceRole,
	GetServiceRoleById,
} from '.././models';
import { customInstance, ErrorType } from '.././axios';

/**
 * @summary Creates a new service role
 */
export const serviceRoleCreate = (createServiceRole: CreateServiceRole) => {
	return customInstance<ServiceRoleRecord>({
		url: `/api/v1/service-roles`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: createServiceRole,
	});
};

export type ServiceRoleCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceRoleCreate>>
>;
export type ServiceRoleCreateMutationBody = CreateServiceRole;
export type ServiceRoleCreateMutationError = ErrorType<void>;

export const useServiceRoleCreate = <
	TError = ErrorType<void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceRoleCreate>>,
		TError,
		{ data: CreateServiceRole },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceRoleCreate>>,
		{ data: CreateServiceRole }
	> = (props) => {
		const { data } = props ?? {};

		return serviceRoleCreate(data);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceRoleCreate>>,
		TError,
		{ data: CreateServiceRole },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * @summary Delete a service role
 */
export const serviceRoleDelete = (
	serviceRoleId: string,
	deleteServiceRole: DeleteServiceRole
) => {
	return customInstance<void>({
		url: `/api/v1/service-roles/${serviceRoleId}`,
		method: 'delete',
		headers: { 'Content-Type': 'application/json' },
		data: deleteServiceRole,
	});
};

export type ServiceRoleDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof serviceRoleDelete>>
>;
export type ServiceRoleDeleteMutationBody = DeleteServiceRole;
export type ServiceRoleDeleteMutationError = ErrorType<unknown>;

export const useServiceRoleDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof serviceRoleDelete>>,
		TError,
		{ serviceRoleId: string; data: DeleteServiceRole },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof serviceRoleDelete>>,
		{ serviceRoleId: string; data: DeleteServiceRole }
	> = (props) => {
		const { serviceRoleId, data } = props ?? {};

		return serviceRoleDelete(serviceRoleId, data);
	};

	return useMutation<
		Awaited<ReturnType<typeof serviceRoleDelete>>,
		TError,
		{ serviceRoleId: string; data: DeleteServiceRole },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * @summary Get a service role by its id
 */
export const serviceRoleGetById = (
	serviceRoleId: string,
	getServiceRoleById: GetServiceRoleById,
	signal?: AbortSignal
) => {
	return customInstance<ServiceRoleRecord>({
		url: `/api/v1/service-roles/${serviceRoleId}`,
		method: 'get',
		signal,
		headers: { 'Content-Type': 'application/json' },
	});
};

export const getServiceRoleGetByIdQueryKey = (
	serviceRoleId: string,
	getServiceRoleById: GetServiceRoleById
) => [`/api/v1/service-roles/${serviceRoleId}`, getServiceRoleById];

export type ServiceRoleGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof serviceRoleGetById>>
>;
export type ServiceRoleGetByIdQueryError = ErrorType<void>;

export const useServiceRoleGetById = <
	TData = Awaited<ReturnType<typeof serviceRoleGetById>>,
	TError = ErrorType<void>
>(
	serviceRoleId: string,
	getServiceRoleById: GetServiceRoleById,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof serviceRoleGetById>>,
			TError,
			TData
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getServiceRoleGetByIdQueryKey(serviceRoleId, getServiceRoleById);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof serviceRoleGetById>>
	> = ({ signal }) =>
		serviceRoleGetById(serviceRoleId, getServiceRoleById, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof serviceRoleGetById>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!serviceRoleId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
