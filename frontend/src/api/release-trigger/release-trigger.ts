/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	useQuery,
	useMutation,
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from 'react-query';
import type {
	ReleaseTriggerRecord,
	ErrorResponse,
	CreateReleaseTriggerRequest,
} from '.././models';
import { customInstance, ErrorType } from '.././axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
	config: any,
	args: infer P
) => any
	? P
	: never;

/**
 * Create a release trigger
 * @summary Create a release trigger
 */
export const releaseTriggerCreate = (
	createReleaseTriggerRequest: CreateReleaseTriggerRequest,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<ReleaseTriggerRecord>(
		{
			url: `/api/v1/release-triggers`,
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			data: createReleaseTriggerRequest,
		},
		options
	);
};

export type ReleaseTriggerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof releaseTriggerCreate>>
>;
export type ReleaseTriggerCreateMutationBody = CreateReleaseTriggerRequest;
export type ReleaseTriggerCreateMutationError = ErrorType<ErrorResponse | void>;

export const useReleaseTriggerCreate = <
	TError = ErrorType<ErrorResponse | void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof releaseTriggerCreate>>,
		TError,
		{ data: CreateReleaseTriggerRequest },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof releaseTriggerCreate>>,
		{ data: CreateReleaseTriggerRequest }
	> = (props) => {
		const { data } = props ?? {};

		return releaseTriggerCreate(data, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof releaseTriggerCreate>>,
		TError,
		{ data: CreateReleaseTriggerRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Deletes a release trigger
 * @summary Deletes a release trigger by its id
 */
export const releaseTriggerDelete = (
	releaseTriggerId: number,
	options?: SecondParameter<typeof customInstance>
) => {
	return customInstance<void>(
		{
			url: `/api/v1/release-triggers/${releaseTriggerId}`,
			method: 'delete',
		},
		options
	);
};

export type ReleaseTriggerDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof releaseTriggerDelete>>
>;

export type ReleaseTriggerDeleteMutationError = ErrorType<unknown>;

export const useReleaseTriggerDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof releaseTriggerDelete>>,
		TError,
		{ releaseTriggerId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { mutation: mutationOptions, request: requestOptions } =
		options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof releaseTriggerDelete>>,
		{ releaseTriggerId: number }
	> = (props) => {
		const { releaseTriggerId } = props ?? {};

		return releaseTriggerDelete(releaseTriggerId, requestOptions);
	};

	return useMutation<
		Awaited<ReturnType<typeof releaseTriggerDelete>>,
		TError,
		{ releaseTriggerId: number },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Get a release trigger by its id
 * @summary Get a release trigger
 */
export const releaseTriggerGetById = (
	releaseTriggerId: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal
) => {
	return customInstance<ReleaseTriggerRecord>(
		{
			url: `/api/v1/release-triggers/${releaseTriggerId}`,
			method: 'get',
			signal,
		},
		options
	);
};

export const getReleaseTriggerGetByIdQueryKey = (releaseTriggerId: number) => [
	`/api/v1/release-triggers/${releaseTriggerId}`,
];

export type ReleaseTriggerGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof releaseTriggerGetById>>
>;
export type ReleaseTriggerGetByIdQueryError = ErrorType<void>;

export const useReleaseTriggerGetById = <
	TData = Awaited<ReturnType<typeof releaseTriggerGetById>>,
	TError = ErrorType<void>
>(
	releaseTriggerId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof releaseTriggerGetById>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReleaseTriggerGetByIdQueryKey(releaseTriggerId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof releaseTriggerGetById>>
	> = ({ signal }) =>
		releaseTriggerGetById(releaseTriggerId, requestOptions, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof releaseTriggerGetById>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!releaseTriggerId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
