/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Service Release Manager API
 * OpenAPI spec version: v1
 */
import {
	useQuery,
	useMutation,
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from 'react-query';
import type { LocaleRecord, CreateLocaleRequest } from '.././models';
import { customInstance, ErrorType } from '.././axios';

/**
 * Create a new locale
 * @summary Create a new locale
 */
export const localeCreate = (createLocaleRequest: CreateLocaleRequest) => {
	return customInstance<LocaleRecord>({
		url: `/api/v1/locales`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: createLocaleRequest,
	});
};

export type LocaleCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof localeCreate>>
>;
export type LocaleCreateMutationBody = CreateLocaleRequest;
export type LocaleCreateMutationError = ErrorType<void>;

export const useLocaleCreate = <
	TError = ErrorType<void>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof localeCreate>>,
		TError,
		{ data: CreateLocaleRequest },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof localeCreate>>,
		{ data: CreateLocaleRequest }
	> = (props) => {
		const { data } = props ?? {};

		return localeCreate(data);
	};

	return useMutation<
		Awaited<ReturnType<typeof localeCreate>>,
		TError,
		{ data: CreateLocaleRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Deletes a locale from the database
 * @summary Delete a locale
 */
export const localeDelete = (localeId: number) => {
	return customInstance<void>({
		url: `/api/v1/locales/${localeId}`,
		method: 'delete',
	});
};

export type LocaleDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof localeDelete>>
>;

export type LocaleDeleteMutationError = ErrorType<unknown>;

export const useLocaleDelete = <
	TError = ErrorType<unknown>,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof localeDelete>>,
		TError,
		{ localeId: number },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof localeDelete>>,
		{ localeId: number }
	> = (props) => {
		const { localeId } = props ?? {};

		return localeDelete(localeId);
	};

	return useMutation<
		Awaited<ReturnType<typeof localeDelete>>,
		TError,
		{ localeId: number },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Get a locale by id
 * @summary Get a locale by id
 */
export const localeGetById = (localeId: number, signal?: AbortSignal) => {
	return customInstance<LocaleRecord>({
		url: `/api/v1/locales/${localeId}`,
		method: 'get',
		signal,
	});
};

export const getLocaleGetByIdQueryKey = (localeId: number) => [
	`/api/v1/locales/${localeId}`,
];

export type LocaleGetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof localeGetById>>
>;
export type LocaleGetByIdQueryError = ErrorType<void>;

export const useLocaleGetById = <
	TData = Awaited<ReturnType<typeof localeGetById>>,
	TError = ErrorType<void>
>(
	localeId: number,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof localeGetById>>,
			TError,
			TData
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getLocaleGetByIdQueryKey(localeId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof localeGetById>>> = ({
		signal,
	}) => localeGetById(localeId, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof localeGetById>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!localeId, ...queryOptions });

	return {
		queryKey,
		...query,
	};
};
