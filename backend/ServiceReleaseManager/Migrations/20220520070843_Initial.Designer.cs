// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceReleaseManager.DataAccess;

#nullable disable

namespace ServiceReleaseManager.Migrations
{
    [DbContext(typeof(ServiceReleaseManagerDbContext))]
    [Migration("20220520070843_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Locale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Locale");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Organisation.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Organisation.OrganisationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ServiceCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServiceDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("UserCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("UserDelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("OrganisationRoles");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Release.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("integer");

                    b.Property<int>("BuildNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PublishedById")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("PublishedById");

                    b.HasIndex("ServiceId");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Release.ReleaseLocalizedMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LocaleId")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("ReleaseLocalizedMetadatas");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Release.ReleaseTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReleaseTargets");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Release.ReleaseTrigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseTargetId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseTargetId");

                    b.ToTable("ReleaseTriggers");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Service.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Service.ServiceRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("ReleaseApprove")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReleaseCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReleaseLocalizedMetadataEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReleaseMetadataEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReleasePublish")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ServiceRoles");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Service.ServiceTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LocalizedMetadata")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("StaticMetadata")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.ToTable("ServiceTemplates");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.User.UserOrganisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OrganisationRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganisations");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.User.UserService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServices");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Locale", b =>
                {
                    b.HasOne("ServiceReleaseManager.Domain.Models.Service.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Release.Release", b =>
                {
                    b.HasOne("ServiceReleaseManager.Domain.Models.User.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("ServiceReleaseManager.Domain.Models.User.User", "PublishedBy")
                        .WithMany()
                        .HasForeignKey("PublishedById");

                    b.HasOne("ServiceReleaseManager.Domain.Models.Service.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("PublishedBy");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Release.ReleaseLocalizedMetadata", b =>
                {
                    b.HasOne("ServiceReleaseManager.Domain.Models.Locale", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceReleaseManager.Domain.Models.Release.Release", "Release")
                        .WithMany()
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locale");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Release.ReleaseTarget", b =>
                {
                    b.HasOne("ServiceReleaseManager.Domain.Models.Service.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Release.ReleaseTrigger", b =>
                {
                    b.HasOne("ServiceReleaseManager.Domain.Models.Release.ReleaseTarget", "ReleaseTarget")
                        .WithMany()
                        .HasForeignKey("ReleaseTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReleaseTarget");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.Service.Service", b =>
                {
                    b.HasOne("ServiceReleaseManager.Domain.Models.Organisation.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.User.UserOrganisation", b =>
                {
                    b.HasOne("ServiceReleaseManager.Domain.Models.Organisation.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceReleaseManager.Domain.Models.Organisation.OrganisationRole", "OrganisationRole")
                        .WithMany()
                        .HasForeignKey("OrganisationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceReleaseManager.Domain.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("OrganisationRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceReleaseManager.Domain.Models.User.UserService", b =>
                {
                    b.HasOne("ServiceReleaseManager.Domain.Models.Service.ServiceRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceReleaseManager.Domain.Models.Service.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceReleaseManager.Domain.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Service");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
